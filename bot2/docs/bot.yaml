bot: { domain: null,
  _events: {},
  _maxListeners: 10,
  _plugins: 
   [ oppisite: [Function],
     rhymes: [Function],
     syllable: [Function],
     letterLookup: [Function],
     wordLength: [Function],
     nextNumber: [Function],
     createFact: [Function],
     resolveAdjective: [Function],
     evaluateExpression: [Function],
     numToRoman: [Function],
     numToHex: [Function],
     numToBinary: [Function],
     numMissing: [Function],
     numSequence: [Function],
     hasName: [Function],
     has: [Function],
     findLoc: [Function],
     tooAdjective: [Function],
     usedFor: [Function],
     resolveFact: [Function],
     putA: [Function],
     isA: [Function],
     colorLookup: [Function],
     makeChoice: [Function],
     findMoney: [Function],
     findDate: [Function],
     locatedAt: [Function],
     aquireGoods: [Function],
     bail: [Function],
     one: [Function],
     num: [Function],
     changetopic: [Function],
     changefunctionreply: [Function],
     getDOW: [Function],
     getDate: [Function],
     getDateTomorrow: [Function],
     getSeason: [Function],
     getTime: [Function],
     getTimeOfDay: [Function],
     getDayOfWeek: [Function],
     getMonth: [Function],
     save: [Function],
     get: [Function],
     createUserFact: [Function],
     wordnetDefine: [Function],
     plural: [Function],
     not: [Function],
     lowercase: [Function] ],
  normalize: { loadData: [Function], clean: [Function] },
  question: 
   { lists: 
      { at: [Object],
        how: [Object],
        in: [Object],
        inon: [Object],
        what: [Object],
        where: [Object],
        why: [Object],
        on: [Object],
        abb: [Object],
        act: [Object],
        who: [Object],
        an: [Object],
        art: [Object],
        be: [Object],
        anim: [Object],
        cause: [Object],
        big: [Object],
        city: [Object],
        comp: [Object],
        body: [Object],
        color: [Object],
        code: [Object],
        country: [Object],
        currency: [Object],
        culture: [Object],
        date: [Object],
        def: [Object],
        desc: [Object],
        dimen: [Object],
        dise: [Object],
        dist: [Object],
        do: [Object],
        eff: [Object],
        event: [Object],
        food: [Object],
        group: [Object],
        fast: [Object],
        instrument: [Object],
        job: [Object],
        lang: [Object],
        have: [Object],
        last: [Object],
        loca: [Object],
        money: [Object],
        letter: [Object],
        modal: [Object],
        mount: [Object],
        name: [Object],
        num: [Object],
        ord: [Object],
        pastbe: [Object],
        perc: [Object],
        popu: [Object],
        other: [Object],
        peop: [Object],
        plant: [Object],
        presentbe: [Object],
        prof: [Object],
        prod: [Object],
        singlebe: [Object],
        quot: [Object],
        religion: [Object],
        speak: [Object],
        speed: [Object],
        sport: [Object],
        stand: [Object],
        state: [Object],
        temp: [Object],
        tech: [Object],
        substance: [Object],
        symbol: [Object],
        term: [Object],
        unit: [Object],
        time: [Object],
        univ: [Object],
        title: [Object],
        vessel: [Object],
        weight: [Object],
        word: [Object] } },
  topicSystem: 
   { topics: [ [Object], [Object] ],
     tfidf: { documents: [], _idfCache: {} } },
  factSystem: 
   { conceptToList: [Function],
     create: [Function],
     db: 
      { breadthFirst: [Function: breadthFirst],
        deepFirst: [Function: deepFirst] },
     createUserDB: [Function],
     createUserDBWithData: [Function] },
  memory: 
   { conceptToList: [Function],
     create: [Function],
     db: 
      { getStream: [Function],
        get: [Function],
        put: [Function],
        del: [Function],
        putStream: [Function],
        delStream: [Function],
        close: [Function],
        v: [Function: Variable],
        searchStream: [Function],
        search: [Function],
        isOpen: [Function],
        nav: [Function],
        generateBatch: [Function: generateBatch],
        joinStream: [Function],
        join: [Function],
        approximateSize: [Function] },
     createUserDB: [Function],
     createUserDBWithData: [Function] },
  scope: 
   { facts: 
      { conceptToList: [Function],
        create: [Function],
        db: [Object],
        createUserDB: [Function],
        createUserDBWithData: [Function] },
     topicSystem: { topics: [Object], tfidf: [Object] },
     botfacts: 
      { conceptToList: [Function],
        create: [Function],
        db: [Object],
        createUserDB: [Function],
        createUserDBWithData: [Function] },
     message: 
      { id: 'xW5b9uM0',
        facts: [Object],
        createdAt: Sat Jan 24 2015 22:44:56 GMT-0800 (PST),
        raw: 'wot',
        clean: 'wot',
        dict: [Object],
        words: [Object],
        cwords: [Object],
        taggedWords: [Object],
        lemWords: [Object],
        lemString: 'wot',
        posString: 'NN',
        qtype: '',
        qSubType: '',
        isQuestion: false,
        sentiment: 0,
        nouns: [Object],
        names: [],
        list: [],
        adjectives: [],
        adverbs: [],
        verbs: [],
        pnouns: [],
        pronouns: [],
        compareWords: [],
        numbers: [],
        compare: false,
        date: null,
        cNouns: [Object],
        numericExp: false,
        halfNumericExp: false,
        entities: [Object],
        triggerId: 'AT9gnoCL' },
     user: 
      { __v: 2,
        _id: 54c490e5731b47b51776f1cb,
        conversation: 2,
        currentTopic: 'inspector',
        id: '127.0.0.1:52890',
        lastMessageSentAt: Sat Jan 24 2015 22:44:56 GMT-0800 (PST),
        pendingTopic: 'inspector',
        rally: 0,
        status: 0,
        volley: 0,
        __history__: 
         { topic: [ 'inspector', 'random' ],
           reply: [ [Object], [Object] ],
           input: [ [Object], [Object] ] } } },
  users: 
   { [Function: model]
     base: 
      { connections: [Object],
        plugins: [],
        models: [Object],
        modelSchemas: [Object],
        options: [Object] },
     modelName: 'User',
     model: [Function: model],
     db: 
      { base: [Object],
        collections: [Object],
        models: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: undefined,
        pass: undefined,
        name: 'userDB',
        options: [Object],
        otherDbs: [],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: true,
        _events: {},
        db: [Object] },
     discriminators: undefined,
     findOrCreate: [Function: findOrCreate],
     schema: 
      { paths: [Object],
        subpaths: {},
        virtuals: [Object],
        nested: [Object],
        inherits: {},
        callQueue: [Object],
        _indexes: [],
        methods: [Object],
        statics: [Object],
        tree: [Object],
        _requiredpaths: [],
        discriminatorMapping: undefined,
        _indexedpaths: [],
        options: [Object],
        _events: {} },
     options: undefined,
     collection: 
      { collection: [Object],
        opts: [Object],
        name: 'users',
        conn: [Object],
        queue: [],
        buffer: false } } }

